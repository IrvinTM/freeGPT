package com.g4f;

import java.util.ArrayList;
import org.json.JSONObject;
import com.g4f.providers.NexraGPT;

public class AI {
    private ArrayList<Message> messages;
    private String prompt;
    private String model;
    private String type;
    private boolean historyAble;
    private boolean stream;
    private boolean markdown;
    private String[] models ={
        "gpt-4",
        "gpt-4-0613",
        "gpt-4-32k",
        "gpt-4-0314",
        "gpt-4-32k-0314",
        "gpt-3.5-turbo",
        "gpt-3.5-turbo-16k",
        "gpt-3.5-turbo-0613",
        "gpt-3.5-turbo-16k-0613",
        "gpt-3.5-turbo-0301",
        "text-davinci-003",
        "text-davinci-002",
        "code-davinci-002",
        "gpt-3",
        "text-curie-001",
        "text-babbage-001",
        "text-ada-001",
        "davinci",
        "curie",
        "babbage",
        "ada",
        "babbage-002",
        "davinci-002"       
    };

    
    /**
     * Constructs a new instance of the AI class.
     */
    public AI() {
        
    }

    /**
     * Constructs a new AI object.
     *
     * @param messages     the list of messages
     * @param prompt       the prompt message
     * @param model        the model to use
     * @param type         the type of AI
     * @param defaultModel the default model
     * @param historyAble  indicates if history is enabled
     * @param stream       indicates if streaming is enabled
     * @param markdown     indicates if markdown is enabled
     */
    public AI(ArrayList<Message> messages, String prompt,String model, String type, String defaultModel, boolean historyAble, boolean stream, boolean markdown) {
        this.messages = messages;
        this.prompt = prompt;
        this.model = model;
        this.type = type;
        this.historyAble = historyAble;
        this.stream = stream;
        this.markdown = markdown;
    }

    /**
     * Retrieves the completion string generated by the NexraGPT provider.
     * 
     * @return The completion string generated by the NexraGPT provider.
     */
    public String getCompletionString(){
        NexraGPT gpt = new NexraGPT();
        gpt.setDefaultModel(this.model);
        gpt.setMarkdown(this.markdown);
        gpt.setStream(this.stream);
        JSONObject response = gpt.getCompletions(this.messages, this.prompt);
        String messageResponse = response.getString("gpt");
        return messageResponse;
    }

    /**
     * Retrieves the completion JSON response from the NexraGPT provider.
     *
     * @return The completion JSON response as a JSONObject.
     */
    public JSONObject getCompletionJSON(){
        NexraGPT gpt = new NexraGPT();
        gpt.setDefaultModel(this.model);
        gpt.setMarkdown(this.markdown);
        gpt.setStream(this.stream);
        JSONObject response = gpt.getCompletions(this.messages, this.prompt);
        Message assisstantMessage = new Message("assistant", response.getString("gpt"));
        JSONObject messageResponse = new JSONObject(assisstantMessage);
        return messageResponse;
    }

    /**
     * Retrieves completions from the NexraGPT provider using a stream.
     * 
     * @return A stream of completions generated by the NexraGPT provider.
     */
    public void getCompletionsStream(){
        NexraGPT gpt = new NexraGPT();
        gpt.setDefaultModel(this.model);
        gpt.setMarkdown(this.markdown);
        gpt.setStream(true);
        gpt.getStreamedCompletions(this.messages, this.prompt);
    }


    /**
     * Returns the list of messages.
     *
     * @return the list of messages
     */
    public ArrayList<Message> getMessages() {
        return messages;
    }

    /**
     * Sets the list of messages for this AI.
     *
     * @param messages the list of messages to set
     */
    public void setMessages(ArrayList<Message> messages) {
        this.messages = messages;
    }

    /**
     * Retrieves the prompt associated with this AI.
     *
     * @return the prompt string
     */
    public String getPrompt() {
        return prompt;
    }

    /**
     * Sets the prompt for the AI.
     *
     * @param prompt the new prompt to set
     */
    public void setPrompt(String prompt) {
        this.prompt = prompt;
    }

    /**
     * Returns the model used by the AI.
     *
     * @return the model used by the AI
     */
    public String getModel() {
        return model;
    }
    /**
     * Sets the model for the AI, get supported models with the getModels method.
     * 
     * @param model the new model to set
     */
    public void setModel(String model) {
        this.model = model;
    }
    /**
     * Returns the type of the AI.
     *
     * @return the type of the AI
     */
    public String getType() {
        return type;
    }

    /**
     * Returns a boolean value indicating whether the history is able to be tracked.
     *
     * @return true if the history is able to be tracked, false otherwise.
     */
    public boolean isHistoryAble() {
        return historyAble;
    }
    /**
     * Sets whether the AI's history is enabled or disabled.
     * 
     * @param historyAble true if the AI's history should be enabled, false otherwise
     */
    public void setHistoryAble(boolean historyAble) {
        this.historyAble = historyAble;
    }
    /**
     * Returns whether the AI is in stream mode or not.
     *
     * @return true if the AI is in stream mode, false otherwise.
     */
    public boolean isStream() {
        return stream;
    }
    /**
     * Experimental feature!! it may not work properly.
     * Leave it on false for proper completions. Sets the stream flag.
     * 
     * @param stream the new value for the stream flag
     */
    /**
     * Sets the stream flag.
     * 
     * @param stream the new value for the stream flag
     */
    public void setStream(boolean stream) {
        this.stream = stream;
    }
    /**
     * Checks if the content is in Markdown format.
     *
     * @return true if the content is in Markdown format, false otherwise.
     */
    public boolean isMarkdown() {
        return markdown;
    }
    /**
     * Sets the markdown flag for the AI.
     * 
     * @param markdown true if the AI should use markdown, false otherwise
     */
    public void setMarkdown(boolean markdown) {
        this.markdown = markdown;
    }

    /**
     * Returns the array of models.
     *
     * @return the array of models
     */
    public String[] getModels() {
        return models;
    }
    
}
